@page "/ProfilePage"
@using Models
@using SampleApi.Dtos
@using System.Net.Http

<link href="css/ProfilePage.css" rel="stylesheet" />
<PageTitle>Profiles</PageTitle>

<div class="MainContent"

    <div class="Group">
        <h2 style="color: @_piLambSelected" @onclick="ChangePlayersToPiLamb">Pi Lamb</h2>
        <h2 style="color: @_hometownSelected" @onclick="ChangePlayersToHometown">Hometown</h2>
    </div>

    <h1>Select Player to View</h1>

    @if(!isLoading && _apiCheck)
    {
        if(PokerPlayers != null)
        {
            <select value="playerSelectedId" @onchange="onChange">
                @foreach(var player in PokerPlayers)
                {
                    <option value="@player.UserId">@player.UserName</option>
                }
            </select>
        }
    }
    else
    {
        <p>Loading Players...</p>
    }

    @if(isPlayerSelected)
    {
        <h2>@WelcomeMessage</h2>
        <img src="@PlayerLoggedIn.ImageUrl"/>

        @if(PlayerLoggedIn.Sessions.Count() > 0)
        {
            <div class="BestWorstSessions">
                <div>
                    <h2>Best Session:</h2>
                    <p>@BestGame.SessionDate.ToShortDateString()</p>
                    <h4>$@BestGame.SessionBalance</h4>
                </div>
                <div>
                    <h2>Worst Session:</h2>
                    <p>@WorstGame.SessionDate.ToShortDateString()</p>
                    <h4>$@WorstGame.SessionBalance</h4>
                </div>
            </div>
            <h2>Average Session:</h2>
            <h4>$@AveragePerformance</h4>

            <h1>Previous Sessions</h1>
            @if (PlayerLoggedIn?.Sessions != null && PlayerLoggedIn.Sessions.Any())
            {
                <div class="Chart">
                    <ApexChart TItem="PlayerSessions"
                    Options="options">
                        <ApexPointSeries TItem="PlayerSessions"
                        Items="PlayerLoggedIn.Sessions"
                        Name="Profit/Loss"
                        SeriesType="SeriesType.Line"
                        XValue="e => e.SessionDate.ToShortDateString()"
                        YValue="e => e.SessionBalance"
                        ShowDataLabels />
                    </ApexChart>
                </div>
            }

            @foreach(var session in PlayerLoggedIn.Sessions)
            {
                // Change color whether session was positive or negative
                string textColor;
                @if (session.SessionBalance > 0) textColor = "green";
                else if (session.SessionBalance < 0) textColor = "red";
                else textColor = "grey";

                <div class="previousSessions">
                    <p>Date: @session.SessionDate.ToShortDateString()</p>
                    <p style="color: @textColor">Balance: $ @session.SessionBalance</p>
                </div>
            }
        }
    }

</div>

@code {
    bool isPlayerSelected = false;
    string WelcomeMessage;
    PlayerSessions? BestGame;
    PlayerSessions? WorstGame;
    decimal AveragePerformance;
    private ApexChartOptions<PlayerSessions> options { get; set; } = new();
    static HttpClient client = new HttpClient();
    PokerPlayerDto PlayerLoggedIn;

    private List<Player> PokerPlayers;
    private List<Player>? _piLamb;
    private List<Player>? _hometown;
    private string _piLambSelected = "rgb(65, 154, 181)";
    private string _hometownSelected = "";

    private bool _apiCheck = false;
    bool isLoading = true;

    public async Task onChange(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            var id = int.Parse(args.Value.ToString());
            LoadPlayer(id);
        }                   
    }

    private async Task LoadPlayer(int id)
    {
        try
        {
            HttpResponseMessage response = await client.GetAsync($"https://sampleapi-9y49.onrender.com/LoadPlayer/{id}");

            if (response.IsSuccessStatusCode)
            {
                PlayerLoggedIn = await response.Content.ReadFromJsonAsync<PokerPlayerDto>();

                WelcomeMessage = PlayerLoggedIn.UserName + "'s Profile";
                if (PlayerLoggedIn.Sessions.Count > 0)
                {
                    BestGame = PlayerLoggedIn.Sessions.MaxBy(session => session.SessionBalance);
                    WorstGame = PlayerLoggedIn.Sessions.MinBy(session => session.SessionBalance);
                    AveragePerformance = Math.Round(PlayerLoggedIn.Sessions.Average(session => session.SessionBalance), 2);
                    UpdateChartOptions();
                }
                isPlayerSelected = true;

                StateHasChanged();
            }
        }
        catch
        {
            _apiCheck = false;
        }
    }

    private async Task UpdateChartOptions()
    {
        options = new ApexChartOptions<PlayerSessions>
            {
                Chart = new Chart
                {
                    Toolbar = new Toolbar
                    {
                        Show = true
                    },
                    ForeColor = "#fff",

                },
                DataLabels = new ApexCharts.DataLabels
                {
                    OffsetY = -6d
                },
            };
        options.PlotOptions = new PlotOptions
            {
                Line = new PlotOptionsLine
                {
                    Colors = new LineColors
                    {
                        Threshold = 0,
                        ColorAboveThreshold = "#0088ee",
                        ColorBelowThreshold = "#ff0000"
                    }
                }
            };
    }

    protected override async void OnInitialized()
    {
        var client = new HttpClient();
        try
        {
            HttpResponseMessage response = await client.GetAsync("https://sampleapi-9y49.onrender.com/GetAllPlayers");

            if (response.IsSuccessStatusCode)
            {
                PokerPlayers = await response.Content.ReadFromJsonAsync<List<Player>>();
            } 

            _hometown = PokerPlayers.Where(player => player.FriendGroup == 1).ToList();
            _piLamb = PokerPlayers.Where(player => player.FriendGroup == 0).ToList();

            PokerPlayers = _piLamb;
        }
        catch
        {
            _apiCheck = false;
        }
        finally
        {
            _apiCheck = true;
            isLoading = false;
		}
		StateHasChanged();
	}

    private void ChangePlayersToPiLamb()
    {
        PokerPlayers = _piLamb;
        _piLambSelected = "rgb(65, 154, 181)";
        _hometownSelected = "";
    }

    private void ChangePlayersToHometown()
    {
        PokerPlayers = _hometown;
        _hometownSelected = "rgb(65, 154, 181)";
        _piLambSelected = "";
    }
}